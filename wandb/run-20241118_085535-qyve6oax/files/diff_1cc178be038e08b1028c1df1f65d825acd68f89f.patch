diff --git a/first_run.py b/first_run.py
index dd9e67a..a88f488 100644
--- a/first_run.py
+++ b/first_run.py
@@ -1,5 +1,10 @@
 from custom_env import QuadEnv
 from stable_baselines3 import SAC
+from wandb.integration.sb3 import WandbCallback
+from stable_baselines3.common.monitor import Monitor
+from stable_baselines3.common.vec_env import VecVideoRecorder
+import wandb
+
 
 env_parameters = {
     'forward_reward_weight': 1,
@@ -8,29 +13,52 @@ env_parameters = {
     'healthy_reward_weight': 1,
     'main_body': 1,
     'healthy_z_range': (0.195, 0.75),
-    'include_cfrc_ext_in_observation': True,
-    'terminate_when_unhealthy': True,
     'reset_noise_scale': 0.1,
     'contact_force_range': (-1.0, 1.0)
 }
 
 mujoco_parameters = {
     'xml_file': './robots/boston_dynamics_spot/scene.xml',
-    'frame_skip': 5,
+    'frame_skip': 50,
     'observation_space': None,  # needs to be defined after
     'default_camera_config': 'default_camera_config',
     'render_mode': 'human'
 }
 
 env = QuadEnv(env_parameters, mujoco_parameters)
+env = Monitor(env)
+
+run = wandb.init(
+    project="Quad_Mujoco",
+    sync_tensorboard=True,  # auto-upload sb3's tensorboard metrics
+    monitor_gym=True,  # auto-upload the videos of agents playing the game
+    save_code=True,  # optional
+)
 
-model = SAC("MlpPolicy", env, verbose=1)
-model.learn(total_timesteps=2000)
+model = SAC("MlpPolicy",
+            env,
+            verbose=1,
+            tensorboard_log=f"runs/{run.id}")
 
 vec_env = model.get_env()
+vec_env = VecVideoRecorder(
+    vec_env,
+    f"videos/{run.id}",
+    record_video_trigger=lambda x: x % 1000 == 0,
+    video_length=200,
+)
+
+model.learn(
+    total_timesteps=5000,
+    callback=WandbCallback(
+        gradient_save_freq=100,
+        model_save_path='models'
+    ))
+
+
 obs = vec_env.reset()
 for i in range(10000):
     action, _state = model.predict(obs, deterministic=True)
     obs, reward, done, info = vec_env.step(action)
-    vec_env.render("human")
-env.close()
+vec_env.close()
+run.finish()
